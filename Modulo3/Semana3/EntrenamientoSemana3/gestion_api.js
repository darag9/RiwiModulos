// Function to fetch and display products
function getProducts() {
    fetch('http://localhost:3000/productos')
        .then(response => response.json())
        .then(data => {
            const productsContainer = document.getElementById('products-container');
            productsContainer.innerHTML = '';
            if (data.length > 0) {
                const ul = document.createElement('ul');
                data.forEach(product => {
                    
                    const li = document.createElement('li');
                    li.textContent = `ID: ${product.id}, Name: ${product.nombre}, Price: $${product.precio}`;
                    ul.appendChild(li);
                });
                productsContainer.appendChild(ul);
            } else {
                productsContainer.textContent = 'No products available.';
            }
            console.log('Available products: ', data);
        })
        .catch(error => {
            console.error('Error fetching products:', error);
            document.getElementById('products-container').textContent = 'Error loading products.';
        });
}

// Function to add a new product (no change needed here, as ID is generated by server)
function addProduct(product) {
    fetch('http://localhost:3000/productos', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(product)
    })
        .then(response => response.json())
        .then(data => {
            console.log('Product created: ', data);
            getProducts();
        })
        .catch(error => console.error('Error creating product: ', error));
}

// Function to update a product
function updateProduct(id, productData) {
    
    const numericId = Number(id);
    if (isNaN(numericId)) {
        console.error('Invalid ID for update: ', id);
        return 0;
    }

    fetch(`http://localhost:3000/productos/${numericId}`, {
        method: 'PUT',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(productData)
    })
        .then(response => response.json())
        .then(data => {
            console.log('Product updated: ', data);
            getProducts();
        })
        .catch(error => console.error('Error updating product: ', error));
}

// Function to delete a product
function deleteProduct(id) {
    
    const numericId = Number(id);
    if (isNaN(numericId)) {
        console.error('Invalid ID for delete: ', id);
        return 0;
    }

    fetch(`http://localhost:3000/productos/${numericId}`, {
        method: 'DELETE'
    })
        .then(() => {
            console.log(`Effectively deleted product with ID: ${numericId}`);
            getProducts();
        })
        .catch(error => console.error('Error. Product could not be deleted.', error));
}

// Event Listeners for forms
document.addEventListener('DOMContentLoaded', () => {
    getProducts();

    const addProductForm = document.getElementById('add-product-form');
    addProductForm.addEventListener('submit', (event) => {
        event.preventDefault();
        const name = document.getElementById('new-product-name').value;
        const price = parseFloat(document.getElementById('new-product-price').value);
        const newProduct = { nombre: name, precio: price };
        addProduct(newProduct);
        addProductForm.reset();
    });

    const updateProductForm = document.getElementById('update-product-form');
    updateProductForm.addEventListener('submit', (event) => {
        event.preventDefault();
        const id = document.getElementById('update-product-id').value;
        const name = document.getElementById('update-product-name').value;
        const price = parseFloat(document.getElementById('update-product-price').value);

        const updatedProductData = {};
        if (name) updatedProductData.nombre = name;
        if (!isNaN(price)) updatedProductData.precio = price;

        if (Object.keys(updatedProductData).length > 0) {
            updateProduct(id, updatedProductData);
        } else {
            console.warn('No update data provided.');
        }
        updateProductForm.reset();
    });

    const deleteProductForm = document.getElementById('delete-product-form');
    deleteProductForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const id = document.getElementById('delete-product-id').value;
        deleteProduct(id);
        deleteProductForm.reset();
    });
});








